#!/bin/bash
# Deployement script for GitHub / Bitbucket / Any remote Git server

# Use BootSHtrap
# __DEBUG=1 # Sets the debug mode, which outputs logs to standard output
config="`dirname $0`"/bootshtrap.config
source "`dirname $0`"/bootshtrap/bootshtrap/autoload.sh # Autoloads the whole stuff

# Associative arrays for projects in config
unset projects
declare -A projects
unset remote
declare -A remote

# Globals
DEPLOY_DIRECTORY='deploy'
RELEASE_DIRECTORY='release'
WWW_DIRECTORY='www'

# Live branch and directory
LIVE_BRANCH='live'
LIVE_DIRECTORY='prod'

# Staging branch and directory
STAGING_BRANCH='staging'
STAGING_DIRECTORY='beta'

# Init flags
CLEANUP=0
UNATTENDED=0
ROLLBACK=0
INIT=0
LATE_ASSETS=0
NO_ASSETIC=0
BUMP_VERSION=0

# PHP Virtual machine used
PHP_VM="php"
PHP_VM_REMOTE=""

# Loads the config
load_config_file "$(dirname $0)/brad.conf"

# Main entry point
main(){

  # Create log directory if it doesn't exist
  mkdir -p "$LOG_DIRECTORY"

  check_arguments "${@}"

  log_action "Starting Brad"

  if [ ! "$type" = "ghost" ] && [ ! "$type" = "node" ]; then
    detect_php
  fi

  date_today=`date '+%Y-%m-%d'`
  timestamp=`date '+%s'`
    
  # Deploying and releasing
    # The application's base path for deployment and release
    DEPLOY_APP_BASE_PATH=${APPS_BASE_PATH}'/'${DEPLOY_DIRECTORY}'/'${app}
    RELEASE_APP_BASE_PATH=${APPS_BASE_PATH}'/'${RELEASE_DIRECTORY}'/'${app}

    # And the actual folders with the environment and timestamps
    DEPLOY_PATH=${DEPLOY_APP_BASE_PATH}'/'${env}
    RELEASE_PATH=${RELEASE_APP_BASE_PATH}'/rel-'${env}'-'${date_today}"-"${timestamp}
    
  # Serving content
    # The application's base path for serving content
    WWW_APP_BASE_PATH=${REMOTE_APPS_WEB_PATH}'/'${WWW_DIRECTORY}'/'${app}

    # And the actual folders for the instance
    WWW_PATH=${WWW_APP_BASE_PATH}'/rel-'${env}'-'${date_today}"-"${timestamp}
    WWW_LINK=${WWW_APP_BASE_PATH}'/'${env}

  if [ "$type" = "symfony" ] || [ "$type" = "silex" ]; then
    WWW_WEB_LINK=${WWW_LINK}/web
  else
    WWW_WEB_LINK=${WWW_LINK}
  fi

  ADMIN_PATH=${DEPLOY_PATH}'/admin'

  if [ ! "$INIT" = 1 ]; then
    PREVIOUS_PATHS=`$ON_TARGET_DO ls -lL ${WWW_APP_BASE_PATH}`
    PREVIOUS_PATHS=`echo "$PREVIOUS_PATHS" | sed -n "s|rel\-${env}\-[0-9]\{4\}\-[0-9]\{2\}\-[0-9]\{2\}\-\([0-9]*\).*|\1_&|gp" | sort -n | cut -d_ -f2`
    PREVIOUS_PATHS=$(sed 's/\r//g' <<< "$PREVIOUS_PATHS")

    LAST_PATH=`$ON_TARGET_DO ls -lL ${WWW_APP_BASE_PATH}`
    LAST_PATH=`echo "$LAST_PATH" | sed -n "s|rel\-$env\-[0-9]\{4\}\-[0-9]\{2\}\-[0-9]\{2\}\-\([0-9]*\).*|\1_&|gp" | sort -n | tail -2 | head -1 | cut -d_ -f2`
    LAST_PATH=${WWW_APP_BASE_PATH}/${LAST_PATH}
    LAST_PATH=$(sed 's/\r//g' <<< "$LAST_PATH")
  fi

  # Check user
  ack "Current user is" $(whoami)

  # Application name and type
  ack "This application ${app} is" ${type}
  ack "Deployment target" ${remote}
  ack "Deployment PHP engine (when applicable)" ${PHP_VM_REMOTE}
  clear
  
  indicate "Local deployment path" ${DEPLOY_PATH}

  if ! [ "$INIT" = 1 ] && ! [ "$ROLLBACK" = 1 ]; then
    indicate "Local release www path" ${RELEASE_PATH}
    indicate "Live www path" ${WWW_PATH}
    indicate "Live www link" ${WWW_LINK}
  fi
  if [ "$UNATTENDED" = 1 ]; then
    answer="Y"
  else
    answer=`ask "Are you sure you want to continue" "no"`
  fi
  case $answer in
      [Yy]* ) said_yes "Let's go !" ;;
      * ) said_no 
          notify_error "Aborted by user"
          error_exit
          ;;
  esac

  # Init or Deploy ?
  if [ "$INIT" = 1 ]; then
    # ---- INIT ----

    header "Initializing deployment structure"

    # Check if git url is valid :
    git ls-remote "$GIT_URL" > /dev/null 2>&1
    if [ "$?" -ne 0 ]; then
      notify_error "$url is not a valid GIT repository url"
      error_exit
    fi

    init_repo
    log_action "Application inited"

    # ---- END : INIT ----
  else
    # ---- DEPLOY ----

    if [ "$ROLLBACK" = 1 ]; then

      header "Reverting ${env} environment"
      log_action "Rollbacking application ..."
      lock_maintenance   # v
      revert             # |
      unlock_maintenance # ^
      update_changelog
      log_action "Application rollbacked"

    else

      git_pull

      if [ "$type" = "standalone" ] && ! [ "$ROLLBACK" = 1 ] ; then build_js; fi

      header "Preparing ${env} environment for release"
      deploy
      if [ "$BUMP_VERSION" = 1 ] ; then bump_version; fi
      log_action "Application deployed"

      header "Releasing ${env} environment"
      release
      update_changelog 
      log_action "Application released"

      header "Transfering ${env} environment and promoting"
      lock_maintenance   # v
      transfer           # |
      upgrade_db         # |
      link_full          # |
      unlock_maintenance # ^  It should unlock by itself (with link_full overwrite), but in case ...
      log_action "Application promoted"

      if [ "$CLEANUP" = 1 ]; then cleanup; fi

      install_crontabs

    fi
    
    restart_node_app    
    restart_php_engine
    restart_apache_nginx

    # ---- END : DEPLOY ----
  fi
  
  notify_done
  log_action "Exiting Brad"

}

detect_php(){

  if [ "${PHP_VM_REMOTE-}" = "" ]; then
    type -P "hhvm" &>/dev/null && PHP_VM="hhvm"
    remote_php=`$ON_TARGET_DO type -P "hhvm" || echo ""` 
    if [ ! "$remote_php" = "" ]; then
      PHP_VM_REMOTE="hhvm"
    fi
  fi

}

# Check that app, env and other arguments are ok
check_arguments(){

  if [ $# -ge 3 ] && [ "$ROLLBACK" = 1 ]; then
    notify_error "Cannot rollback single files"
    usage
    error_exit
  fi
  
  # We need an app and an environment at least
  app="${1-}"

  # Checking that the project exists
  project_found=false
  # What project, sir ?
  for project_slug in "${!projects[@]}"; do
    if [ "$app" = "$project_slug" ]; then
      type=${projects["$project_slug"]}
      if [ ${remote["$project_slug", "host"]+1} ]; then
        host=${remote["$project_slug", "host"]}
        port=${remote["$project_slug", "port"]}
        path=${remote["$project_slug", "path"]}
        user=${remote["$project_slug", "user"]}
        php_engine=${remote["$project_slug", "php_engine"]-}
      fi
      project_found=true
    fi
  done

  # Naaaaay
  if ! $project_found; then
    notify_error "Bad application name ($app)"
    error_exit
  fi

  warn "Deploying" ${app}

  env="${2-}"
  # Checking environment is good
  case $env in
    "prod") env="$LIVE_DIRECTORY";;
    "beta") env="$STAGING_DIRECTORY";;
    *) if ! [ "$INIT" = 1 ]; then
        notify_error "Bad environment ($env)"
        error_exit
       fi;;
  esac

  if [ ! "${host-}" = "" ]; then
    remote="${user}@${host}:${port}"
    ON_TARGET_DO="ssh -t -t -t -o LogLevel=QUIET ${user}@${host} -p ${port}"
    REMOTE_APPS_WEB_PATH=${path}
  else
    remote="localhost"
    ON_TARGET_DO=""
    REMOTE_APPS_WEB_PATH=${APPS_WEB_PATH}
  fi

  if [ ! "${php_engine-}" = "" ]; then
    PHP_VM_REMOTE="${php_engine}"
  fi

  if [ "$type" = "symfony2" ]; then
    type="symfony"
    SYMFONY_CONSOLE="app/console"
    LOG_CACHE_DIR="app"
  elif [ "$type" = "symfony3" ]; then
    type="symfony"
    SYMFONY_CONSOLE="bin/console"
    LOG_CACHE_DIR="var"
  fi

}

# Set flags
set_cleanup_flag(){ 
  CLEANUP=1
}
set_init_flag(){ 
  INIT=1
  GIT_URL="$1"
}
set_unattended_flag(){ 
  UNATTENDED=1
}
set_rollback_flag(){ 
  ROLLBACK=1
}
set_late_assets_flag(){ 
  LATE_ASSETS=1
}
set_no_assetic_flag(){ 
  NO_ASSETIC=1
}
set_bump_version_flag(){
  BUMP_VERSION=1
}
log_action(){

  if [ "$INIT" = 1 ]; then
    action="init"
  else
    action="deploy"
  fi

  echo "`/bin/date '+%Y-%m-%dT%H:%M:%S'` $(hostname) $action[$app@$env] : ($(whoami)) $1" >> "$LOG_DIRECTORY/brad.log"

}

init_repo(){

  # Check the existence of branches
  HAS_STAGING=`git ls-remote $GIT_URL | grep ${STAGING_BRANCH} | wc -l`
  HAS_LIVE=`git ls-remote $GIT_URL | grep ${LIVE_BRANCH} | wc -l`

  # First ...
  if [ "$HAS_LIVE" -lt 1 ]; then
    notify_error "no ${LIVE_BRANCH} branch"
    error_exit
  fi

  if [ "$HAS_STAGING" -lt 1 ]; then
    warn "no ${STAGING_BRANCH} branch"
  fi

  DIR_PATH=`readlink -f "${DEPLOY_APP_BASE_PATH}"` # Get rid of symlinks and get abs path
  REMOTE_DIR_PATH=`$ON_TARGET_DO readlink -f "${WWW_APP_BASE_PATH}"`

  if [[ -d "${DIR_PATH}" ]] ; then # now we're testing
    warn "This application already has a deployment folder ($app). Continuing."
  else
    
    # We create a dir for the app
    mkdir -p ${DEPLOY_APP_BASE_PATH}

    ###### LIVE ###### 
    # Installing Live deployed environment
    cd ${DEPLOY_APP_BASE_PATH}
    mkdir ${LIVE_DIRECTORY}

    cd ${DEPLOY_APP_BASE_PATH}/${LIVE_DIRECTORY}
    git init
    git remote add -t ${LIVE_BRANCH} -f origin $GIT_URL
    git checkout ${LIVE_BRANCH}

    if [ "$type" = "symfony" ] || [ "$type" = "silex" ]; then

      curl -S http://getcomposer.org/installer | $PHP_VM
      $PHP_VM composer.phar self-update
      $PHP_VM composer.phar install --prefer-dist --ignore-platform-reqs # --optimize-autoloader
    fi

    if [ "$type" = "symfony" ]; then
      cd ${DEPLOY_APP_BASE_PATH}/${LIVE_DIRECTORY}/web
      ln -s ../../uploads/${LIVE_DIRECTORY} uploads

      # var/sessions for sessions storage
      cd ${DEPLOY_APP_BASE_PATH}/${LIVE_DIRECTORY}/app
      ln -s ../../var/${LIVE_DIRECTORY} var

    elif [ "$type" = "ghost" ]; then
      cd ${DEPLOY_APP_BASE_PATH}/${LIVE_DIRECTORY}/content
      rm -fR ${DEPLOY_APP_BASE_PATH}/${LIVE_DIRECTORY}/content/data 
      ln -s ../../data/${LIVE_DIRECTORY} data

      # content/images for images storage
      cd ${DEPLOY_APP_BASE_PATH}/${LIVE_DIRECTORY}/content
      rm -fR ${DEPLOY_APP_BASE_PATH}/${LIVE_DIRECTORY}/content/images 
      ln -s ../../images/${LIVE_DIRECTORY} images

      # content/apps for apps storage
      cd ${DEPLOY_APP_BASE_PATH}/${LIVE_DIRECTORY}/content
      rm -fR ${DEPLOY_APP_BASE_PATH}/${LIVE_DIRECTORY}/content/apps 
      ln -s ../../apps/${LIVE_DIRECTORY} apps
    fi

    ###### STAGING ###### 
    # Installing STAGING deployed environment
    if [ "$HAS_STAGING" -gt 0 ]; then

      cd ${DEPLOY_APP_BASE_PATH}
      mkdir ${STAGING_DIRECTORY}

      cd ${DEPLOY_APP_BASE_PATH}/${STAGING_DIRECTORY}
      git init
      git remote add -t ${STAGING_BRANCH} -f origin $GIT_URL

      git checkout ${STAGING_BRANCH}

      if [ "$type" = "symfony" ] || [ "$type" = "silex" ]; then

        curl -S http://getcomposer.org/installer | $PHP_VM
        $PHP_VM composer.phar self-update
        $PHP_VM composer.phar install --prefer-dist --ignore-platform-reqs # --optimize-autoloader

      fi

      if [ "$type" = "symfony" ]; then
        # web/uploads for apache uploads
        cd ${DEPLOY_APP_BASE_PATH}/${STAGING_DIRECTORY}/web
        ln -s ../../uploads/${STAGING_DIRECTORY} uploads

        # var/sessions for sessions storage
        cd ${DEPLOY_APP_BASE_PATH}/${STAGING_DIRECTORY}/app
        ln -s ../../var/${STAGING_DIRECTORY} var
      elif [ "$type" = "ghost" ]; then
        # content/data for db
        cd ${DEPLOY_APP_BASE_PATH}/${STAGING_DIRECTORY}/content
        rm -fR ${DEPLOY_APP_BASE_PATH}/${STAGING_DIRECTORY}/content/data 
        ln -s ../../data/${STAGING_DIRECTORY} data

        # content/images for images storage
        cd ${DEPLOY_APP_BASE_PATH}/${STAGING_DIRECTORY}/content
        rm -fR ${DEPLOY_APP_BASE_PATH}/${STAGING_DIRECTORY}/content/images 
        ln -s ../../images/${STAGING_DIRECTORY} images

        # content/apps for apps storage
        cd ${DEPLOY_APP_BASE_PATH}/${STAGING_DIRECTORY}/content
        rm -fR ${DEPLOY_APP_BASE_PATH}/${STAGING_DIRECTORY}/content/apps 
        ln -s ../../apps/${STAGING_DIRECTORY} apps
      fi

    fi

  fi

  if [[ `$ON_TARGET_DO test -d ${REMOTE_DIR_PATH} && echo exists` ]] ; then # now we're testing
    warn "This application already has a remote app folder ($app). Continuing."
  else

    # Create remote folders
    $ON_TARGET_DO mkdir -p ${WWW_APP_BASE_PATH}

    if [ "$type" = "symfony" ]; then
      $ON_TARGET_DO mkdir -p ${WWW_APP_BASE_PATH}/var  
      $ON_TARGET_DO chmod 775 ${WWW_APP_BASE_PATH}/var
      $ON_TARGET_DO mkdir -p ${WWW_APP_BASE_PATH}/uploads
      $ON_TARGET_DO chmod 775 ${WWW_APP_BASE_PATH}/uploads
      $ON_TARGET_DO sudo chgrp -R ${WWW_USER} ${WWW_APP_BASE_PATH}/var
      $ON_TARGET_DO sudo chgrp -R ${WWW_USER} ${WWW_APP_BASE_PATH}/uploads
    elif [ "$type" = "ghost" ]; then
      $ON_TARGET_DO mkdir -p ${WWW_APP_BASE_PATH}/data  
      $ON_TARGET_DO chmod 775 ${WWW_APP_BASE_PATH}/data
      $ON_TARGET_DO mkdir -p ${WWW_APP_BASE_PATH}/images
      $ON_TARGET_DO chmod 775 ${WWW_APP_BASE_PATH}/images
      $ON_TARGET_DO mkdir -p ${WWW_APP_BASE_PATH}/apps
      $ON_TARGET_DO chmod 775 ${WWW_APP_BASE_PATH}/apps
    fi

    ###### LIVE ###### 
    if [ "$type" = "symfony" ] || [ "$type" = "silex" ]; then
      $ON_TARGET_DO mkdir -p ${WWW_APP_BASE_PATH}/uploads/${LIVE_DIRECTORY}
      $ON_TARGET_DO chmod 775 ${WWW_APP_BASE_PATH}/uploads/${LIVE_DIRECTORY}
      $ON_TARGET_DO sudo chgrp -R ${WWW_USER} ${WWW_APP_BASE_PATH}/uploads/${LIVE_DIRECTORY}
      # Session folder
      $ON_TARGET_DO mkdir -p ${WWW_APP_BASE_PATH}/var/${LIVE_DIRECTORY}/sessions
      $ON_TARGET_DO chmod 775 ${WWW_APP_BASE_PATH}/var/${LIVE_DIRECTORY}/sessions
      $ON_TARGET_DO sudo chgrp -R ${WWW_USER} ${WWW_APP_BASE_PATH}/var/${LIVE_DIRECTORY}/sessions
    elif [ "$type" = "ghost" ]; then
      $ON_TARGET_DO mkdir -p ${WWW_APP_BASE_PATH}/data/${LIVE_DIRECTORY}
      $ON_TARGET_DO chmod 775 ${WWW_APP_BASE_PATH}/data/${LIVE_DIRECTORY}
      $ON_TARGET_DO mkdir -p ${WWW_APP_BASE_PATH}/images/${LIVE_DIRECTORY}
      $ON_TARGET_DO chmod 775 ${WWW_APP_BASE_PATH}/images/${LIVE_DIRECTORY}
      $ON_TARGET_DO mkdir -p ${WWW_APP_BASE_PATH}/apps/${LIVE_DIRECTORY}
      $ON_TARGET_DO chmod 775 ${WWW_APP_BASE_PATH}/apps/${LIVE_DIRECTORY}
    fi

    ###### STAGING ###### 
    if [ "$HAS_STAGING" -gt 0 ]; then

      if [ "$type" = "symfony" ] || [ "$type" = "silex" ]; then
        $ON_TARGET_DO mkdir -p ${WWW_APP_BASE_PATH}/uploads/${STAGING_DIRECTORY}
        $ON_TARGET_DO chmod 775 ${WWW_APP_BASE_PATH}/uploads/${STAGING_DIRECTORY}
        $ON_TARGET_DO sudo chgrp -R ${WWW_USER} ${WWW_APP_BASE_PATH}/uploads/${STAGING_DIRECTORY}
        # Session folder
        $ON_TARGET_DO mkdir -p ${WWW_APP_BASE_PATH}/var/${STAGING_DIRECTORY}/sessions
        $ON_TARGET_DO chmod 775 ${WWW_APP_BASE_PATH}/var/${STAGING_DIRECTORY}/sessions
        $ON_TARGET_DO sudo chgrp -R ${WWW_USER} ${WWW_APP_BASE_PATH}/var/${STAGING_DIRECTORY}/sessions
      elif [ "$type" = "ghost" ]; then
        $ON_TARGET_DO mkdir -p ${WWW_APP_BASE_PATH}/data/${STAGING_DIRECTORY}
        $ON_TARGET_DO chmod 775 ${WWW_APP_BASE_PATH}/data/${STAGING_DIRECTORY}
        $ON_TARGET_DO mkdir -p ${WWW_APP_BASE_PATH}/images/${STAGING_DIRECTORY}
        $ON_TARGET_DO chmod 775 ${WWW_APP_BASE_PATH}/images/${STAGING_DIRECTORY}
        $ON_TARGET_DO mkdir -p ${WWW_APP_BASE_PATH}/apps/${STAGING_DIRECTORY}
        $ON_TARGET_DO chmod 775 ${WWW_APP_BASE_PATH}/apps/${STAGING_DIRECTORY}
      fi

    fi

  fi
  
  # Summary

  clear
  ack "Created or updated environnements :"
  indicate "Remote repository" ${GIT_URL}

  if [ "$HAS_STAGING" -gt 0 ]; then
    indicate "Staging Deployment path" ${DEPLOY_APP_BASE_PATH}/${STAGING_DIRECTORY}
    indicate " --> tracking branch" ${STAGING_BRANCH}
  fi

  indicate "Live Deployment path" ${DEPLOY_APP_BASE_PATH}/${LIVE_DIRECTORY}
  indicate " --> tracking branch " ${LIVE_BRANCH}

  indicate "Deployment target" ${remote}
  indicate "Web path" ${WWW_APP_BASE_PATH}
  clear

  # Done
  notify_done
  exit 0

}

# Fetches and merge the changes found on the remote branch of the given folder
git_pull(){

  cd ${DEPLOY_PATH}

  header "Pulling changes"

  # Git all the way
  ack "Checking out remote branch from origin"
  clear
  echo `git reset --hard HEAD`
  echo `git fetch --tags`
  echo `git pull origin`
  echo `git status`
  clear

  revision=`git log -n 1 --pretty="format:%h %ci"`
  indicate "Deployment folder updated to revision" ${revision}

  revision_safe=`git log -n 1 --pretty="format:%h"`

  # Amend the deployed path
  RELEASE_PATH=${RELEASE_PATH}"-"${revision_safe}
  WWW_PATH=${WWW_PATH}"-"${revision_safe}

}

# Set maintenance mode if any (exists a file maintenance.off.html --> maintenance.html)
lock_maintenance(){

  if [ -e ${WWW_WEB_LINK}"/maintenance.off.html" ]; then
    if [ "$UNATTENDED" = 1 ]; then
      answer="Y"
    else
      answer=`ask "Do you wish to lock in maintenance mode" "no"`
    fi
    case $answer in
        [Yy]* ) said_yes "Setting maintenance mode"
                $ON_TARGET_DO mv ${WWW_WEB_LINK}/maintenance.off.html ${WWW_WEB_LINK}/maintenance.html
                notify_done
                ;;
        * ) said_no ;;
    esac
  fi

}
unlock_maintenance(){

  if [ -e ${WWW_WEB_LINK}"/maintenance.html" ]; then
    if [ "$UNATTENDED" = 1 ]; then
      answer="Y"
    else
      answer=`ask "Do you wish to unlock from maintenance mode" "no"`
    fi
    case $answer in
        [Yy]* ) said_yes "Unlocking from maintenance mode"
                $ON_TARGET_DO mv ${WWW_WEB_LINK}/maintenance.html ${WWW_WEB_LINK}/maintenance.off.html
                notify_done
                ;;
        * ) said_no ;;
    esac
  fi

}

bump_version(){

  if [ "$type" = "symfony" ]; then
    $PHP_VM ${SYMFONY_CONSOLE} version:bump --force || echo "No command available for version bumping."
    ack "Version bumped."
  fi

}

# Builds minified JS if needed (if exists /minify.php)
build_js(){

  # Building minified JS if we have a minify script in admin/
  if [ -e ${ADMIN_PATH}"/minify.php" ]; then
    if [ "$UNATTENDED" = 1 ]; then
      answer="Y"
    else
      answer=`ask "Do you wish to build minified Javascript" "no"`
    fi
    case $answer in
        [Yy]* ) said_yes "Building minified JS"
                cd ${ADMIN_PATH}
                $PHP_VM minify.php > ${DEPLOY_PATH}/js/min/${app}.min.js
                indicate "Minified JS Path" ${DEPLOY_PATH}"/js/min/"${app}".min.js"
                ;;
        * ) said_no ;;
    esac

  fi

}

# Deploys to current release
deploy(){

  # We should install vendors before deploying
  if [ "$type" = "symfony" ] || [ "$type" = "silex" ]; then

    cd ${DEPLOY_PATH}

    # Symfony or Silex
    indicate "Installing vendors via Composer for app" ${app}

    # $PHP_VM composer.phar self-update
    $PHP_VM composer.phar install --ignore-platform-reqs # --optimize-autoloader

    # Cleaning the mess since it is a deploy folder
    if [ "$type" = "symfony" ]; then
      rm -fR ${DEPLOY_PATH}/web/bundles
      rm -fR ${DEPLOY_PATH}/${LOG_CACHE_DIR}/cache/dev
      # This allows to warm the cache even if it fails, so the next command (assets) will not try to warm it
      # and fail miserably
      {
        $PHP_VM ${SYMFONY_CONSOLE} cache:clear --no-warmup -q
      } || {
        ack "Cache warmup tried"
      }
    fi

  else

    indicate "No specific deployment actions for app" ${app}

  fi

}

# Release the current deployment
release(){

  # Copy all files to the destination folder
  mkdir -p ${RELEASE_PATH}
  
  if [ -f "${DEPLOY_PATH}/exclude-release.rsync" ]; then
    rsync -rlpt ${DEPLOY_PATH}/. ${RELEASE_PATH}/. --exclude-from "${DEPLOY_PATH}/exclude-release.rsync"
  else
    rsync -rlpt ${DEPLOY_PATH}/. ${RELEASE_PATH}/.
  fi

  # Symfony 2 Stuff
  if [ "$type" = "symfony" ]; then

    cd ${RELEASE_PATH}

    # Dump assetic assets
    $PHP_VM ${SYMFONY_CONSOLE} assets:install web --symlink --relative
    if [ ! "$LATE_ASSETS" = 1 ] && [ ! "$NO_ASSETIC" = 1 ]; then
      $PHP_VM ${SYMFONY_CONSOLE} assetic:dump -v --env=prod --no-debug
    fi

  elif [ "$type" = "ghost" ] || [ "$type" = "node" ]; then

    cd ${RELEASE_PATH}

    # Install dependencies
    npm install --loglevel warn
    npm install --production

  fi

  clear
  ack "Deployment and release is done !"

}

# Update Changelog
update_changelog(){

  # Update CHANGELOG.txt
  CHANGELOG_NAME='CHANGELOG.txt'

  if [ "$ROLLBACK" = 1 ]; then
    BASE_CHANGELOG_PATH=${LAST_PATH}
  else
    BASE_CHANGELOG_PATH=${RELEASE_PATH}
  fi
  
  if [ "$type" = "symfony" ] || [ "$type" = "silex" ]; then
    CHANGELOG_PATH=${BASE_CHANGELOG_PATH}'/web/'${CHANGELOG_NAME}
  elif [ "$type" = "standalone" ]; then
    CHANGELOG_PATH=${BASE_CHANGELOG_PATH}'/'${CHANGELOG_NAME}
  elif [ "$type" = "ghost" ] || [ "$type" = "node" ]; then
    CHANGELOG_PATH=${BASE_CHANGELOG_PATH}'/'${CHANGELOG_NAME}
  fi

  indicate "Writing CHANGELOG to" ${CHANGELOG_PATH}

  echo "# CHANGELOG" > ${CHANGELOG_PATH}

  if [ "$ROLLBACK" = 1 ]; then

    NOW=$(date +"%c")
    echo "# Last update : ${NOW}" >> ${CHANGELOG_PATH}
    echo "# ! Site is now in ROLLBACKED state !" >> ${CHANGELOG_PATH}
    echo "" >> ${CHANGELOG_PATH}

  else 

    cd ${DEPLOY_PATH}

    current_date=`git log -1 --format="%ad"`
    echo "# Last update : ${current_date}" >> ${CHANGELOG_PATH}
    
    echo "" >> ${CHANGELOG_PATH}
    echo "--" >> ${CHANGELOG_PATH}
    echo "" >> ${CHANGELOG_PATH}

    last_modifs=`git diff HEAD^ HEAD --summary --stat`
    echo "${last_modifs}" >> ${CHANGELOG_PATH}
    
    echo "" >> ${CHANGELOG_PATH}
    echo "&&" >> ${CHANGELOG_PATH}
    echo "" >> ${CHANGELOG_PATH}

    ten_last=`git log -n10 --pretty=format:'%h <%aE> %d %s | %cD' --abbrev-commit`
    echo "${ten_last}" >> ${CHANGELOG_PATH}
    
    echo "" >> ${CHANGELOG_PATH}
    echo "##" >> ${CHANGELOG_PATH}
    echo "" >> ${CHANGELOG_PATH}

    change_log=`git log --no-merges --date-order --date=rfc | \
      sed -e '/^commit.*$/d' | \
      awk '/^Author/ {sub(/\\$/,""); getline t; print $0 t; next}; 1' | \
      sed -e 's/^Author: //g' | \
      sed -e 's/>Date:   \(.*\)/>\t\1/g' | \
      sed -e 's/^\(.*\) \(\)\t\(.*\)/\3    \1    \2/g' >> ${CHANGELOG_PATH}`

  fi

}

# Revert to a previous deployment folder
revert(){

  if ! [ "$LAST_PATH" = "`readlink -f $WWW_LINK`" ]; then

    clear
    warn "Rollback path" ${LAST_PATH}
    if [ "$UNATTENDED" = 1 ]; then
      yn="Y"
    else
      yn=`ask "Are you sure you want to rollback (link)" "no"`
    fi
    case $yn in
        [Yy]* ) said_yes "Rollbacking"
                $ON_TARGET_DO ln -sfvn ${LAST_PATH} ${WWW_LINK}
                clear
                notify_done ;;
         * ) said_no ;;
    esac

  else

    notify_error "No previous instance to rollback to, exiting."
    clear
    exit 1

  fi

}

# Send the release folder to the frontal web server 
transfer(){

   $ON_TARGET_DO mkdir -p ${WWW_PATH}

  if [ ! "$ON_TARGET_DO" = "" ]; then
    # Remote
    if [ -f "${DEPLOY_PATH}/exclude.rsync" ]; then
      rsync -a --del -e "ssh -p ${port}" ${RELEASE_PATH}/. ${user}@${host}:${WWW_PATH} --exclude-from "${RELEASE_PATH}/exclude.rsync"
    else
      rsync -a --del -e "ssh -p ${port}" ${RELEASE_PATH}/. ${user}@${host}:${WWW_PATH}
    fi
  else
    # Local
    if [ -f "${DEPLOY_PATH}/exclude.rsync" ]; then
      rsync -rlpt ${RELEASE_PATH}/. ${WWW_PATH} --exclude-from "${RELEASE_PATH}/exclude.rsync"
    else
      rsync -rlpt ${RELEASE_PATH}/. ${WWW_PATH}
    fi
  fi

  if [ "$type" = "symfony" ]; then

    # Dump assetic assets
    if [ "$LATE_ASSETS" = 1 ] && [ ! "$NO_ASSETIC" = 1 ]; then
      $ON_TARGET_DO $PHP_VM_REMOTE ${WWW_PATH}/${SYMFONY_CONSOLE} assetic:dump -v --env=prod --no-debug
    fi

    # Warming up caches
    $ON_TARGET_DO rm -fR ${WWW_PATH}/${LOG_CACHE_DIR}/cache/prod ${WWW_PATH}/${LOG_CACHE_DIR}/cache/dev
    $ON_TARGET_DO $PHP_VM_REMOTE ${WWW_PATH}/${SYMFONY_CONSOLE} cache:warmup --env=prod

    # A good idea to chgrp www-data
    $ON_TARGET_DO sudo chgrp -R ${WWW_USER} ${WWW_PATH}/*
    # $ON_TARGET_DO chgrp -R ${WWW_USER} ${WWW_APP_BASE_PATH}

    # Ensure that cache, logs are writable
    $ON_TARGET_DO chmod -R 775 ${WWW_PATH}/${LOG_CACHE_DIR} ${WWW_PATH}/${LOG_CACHE_DIR}/cache ${WWW_PATH}/${LOG_CACHE_DIR}/logs ${WWW_PATH}/app/var/sessions # web/uploads
    $ON_TARGET_DO chmod -R 775 ${WWW_PATH}/${LOG_CACHE_DIR}/cache/*
  fi
  
  clear

}

upgrade_db() {

  # Symfony 2 Stuff
  if [ "$type" = "symfony" ]; then

    ack "Upcoming changes to the schema"
    UPDATES=`$ON_TARGET_DO $PHP_VM_REMOTE ${WWW_PATH}/${SYMFONY_CONSOLE} doctrine:schema:update --dump-sql`

    clear
    echo ${UPDATES}
    clear

    if ! [[ "$UPDATES" =~ "Nothing to update" ]]; then
      if [ "$UNATTENDED" = 1 ]; then
        yn="Y"
      else
        yn=`ask "Do you wish to update the schema" "no"`
      fi
      case $yn in
          [Yy]* ) said_yes "Updating schema"
                  $ON_TARGET_DO $PHP_VM_REMOTE ${WWW_PATH}/${SYMFONY_CONSOLE} doctrine:schema:update --force # To be replaced with migrations later on ?
                  clear
                  ack "Database updated !"
                  ;;
          * ) said_no ;;
      esac

    fi

  fi


}

# Link the full folder
link_full(){
  if [ "$UNATTENDED" = 1 ]; then
    yn="Y"
  else
    yn=`ask "Do you wish to promote (link)" "no"`
  fi
  case $yn in
      [Yy]* ) said_yes "Linking"
              $ON_TARGET_DO ln -sfvn ${WWW_PATH} ${WWW_LINK}
              clear
              notify_done ;;
       * ) said_no ;;
  esac

}

# Install crontabs if necessary
install_crontabs(){

  if [ -f "${DEPLOY_PATH}/crontabs" ]; then
    if [ "$UNATTENDED" = 1 ]; then
      yn="Y"
    else
      yn=`ask "Do you want to reinstall cron jobs" "no"`
    fi
    case $yn in
        [Yy]* ) said_yes "Installing crontabs"

                AUTOMATED_KEYWORD_START="\#\[AUTOMATED\:START\:${app}\:${env}\]"
                AUTOMATED_KEYWORD_END="\#\[AUTOMATED\:END\:${app}\:${env}\]"

                CRONTABS="`cat "${DEPLOY_PATH}/crontabs"`"

                NEW_CRON=${AUTOMATED_KEYWORD_START//\\}$'\n'${CRONTABS}$'\n'${AUTOMATED_KEYWORD_END//\\}

                # Replace the [ROOT]
                NEW_CRON=${NEW_CRON//\[ROOT\]/$WWW_LINK}

                # Replace the [CONSOLE]
                if [ "$type" = "symfony" ]; then
                  CONSOLE_PATH=${WWW_LINK}"/${SYMFONY_CONSOLE}"
                  NEW_CRON=${NEW_CRON//\[CONSOLE\]/$CONSOLE_PATH}
                fi

                # Replace the [ENV]
                if [ "$type" = "symfony" ] && [ "$env" = "prod" ]; then
                  NEW_CRON=${NEW_CRON//\[ENV\]/prod}
                else
                  NEW_CRON=${NEW_CRON//\[ENV\]/dev}
                fi
             
                # Remove automated tasks
                crons=$($ON_TARGET_DO crontab -l || echo "")

                if [ ! "$crons" = "" ] && [[ ! $crons == no* ]]; then
                  crons=$(sed 's/\r//g' <<< "$crons")
                  crons=$(sed "/${AUTOMATED_KEYWORD_START}/,/${AUTOMATED_KEYWORD_END}/d" <<< "$crons")
                else
                  crons=""
                fi
                
                crons="${crons}"$'\n'"${NEW_CRON}"

                # Install new crontab
                if [ ! "$ON_TARGET_DO" = "" ]; then 
                  $ON_TARGET_DO bash -c "'echo \"$crons\" | crontab -'"
                else
                  (echo "${crons}")| crontab -
                fi

                # Outputs to check
                $ON_TARGET_DO crontab -l
                clear
                ;;
         * ) said_no ;;
    esac

  fi

}

# Cleanup previous deployment directories
cleanup(){

  warn "All these paths will be permanently deleted"
  for f in $PREVIOUS_PATHS; do
    warn "${app} ($env)" $f
  done
  if [ "$UNATTENDED" = 1 ]; then
    yn="Y"
  else
    yn=`ask "Are you sure you want to cleanup" "no"`
  fi
  case $yn in
      [Yy]* ) said_yes "Cleaning up"
              for f in $PREVIOUS_PATHS
              do
                PATH_TO_DELETE=${WWW_APP_BASE_PATH}/$f
                if ! [ $PATH_TO_DELETE = $WWW_PATH ]; then
                  $ON_TARGET_DO rm -fR $PATH_TO_DELETE
                  warn "Removed" $PATH_TO_DELETE
                fi
              done
              ;;
       * ) said_no ;;
  esac

}


# Restart Apache or Nginx
restart_apache_nginx(){

  if [ ! "$type" = "ghost" ] && [ ! "$type" = "node" ]; then # Not really exactly true since we might want to restart nginx, but it's less common
      
    ng=`$ON_TARGET_DO type -P "nginx" || echo ""` 
    if [ ! "$ng" = "" ]; then
      # Restart Apache
      if [ "$UNATTENDED" = 1 ]; then
        res="Y"
      else
        res=`ask "Do you wish to restart Apache2" "no"`
      fi
      case $res in
          [Yy]* ) said_yes "Restarting Apache2"
                  $ON_TARGET_DO sudo service apache2 restart
                  ;;
          * ) said_no ;;
      esac
    else
      # Restart Nginx
      if [ "$UNATTENDED" = 1 ]; then
        res="Y"
      else
        res=`ask "Do you wish to restart Nginx" "no"`
      fi
      case $res in
          [Yy]* ) said_yes "Restarting Nginx"
                  $ON_TARGET_DO sudo service nginx restart
                  ;;
          * ) said_no ;;
      esac
    fi

  fi
  
}

# Restart the node blog app in supervisor
restart_node_app(){

  if [ "$type" = "ghost" ] || [ "$type" = "node" ]; then
    # Restart the app in supervisorctl
    if [ "$UNATTENDED" = 1 ]; then
      res="Y"
    else
      res=`ask "Do you wish to restart $app" "no"`
    fi
    case $res in
        [Yy]* ) said_yes "Restarting $app via supervisorctl"
                $ON_TARGET_DO sudo supervisorctl restart ${app}
                ;;
        * ) said_no ;;
    esac
  fi
  
}

# Restart PHP / HHVM, only for symfony or silex apps
restart_php_engine(){

  if [ "$type" = "symfony" ] || [ "$type" = "silex" ]; then 

    if [ "$PHP_VM_REMOTE" = "hhvm" ]; then
        # Restart HHVM through service
        if [ "$UNATTENDED" = 1 ]; then
          res="Y"
        else
          res=`ask "Do you wish to restart HHVM" "no"`
        fi
        case $res in
            [Yy]* ) said_yes "Restarting HHVM"
                    $ON_TARGET_DO sudo service hhvm restart
                    ;;
            * ) said_no ;;
        esac
    else 
        # Restart PHP-FPM through service
        if [ "$UNATTENDED" = 1 ]; then
          res="Y"
        else
          res=`ask "Do you wish to restart PHP-FPM" "no"`
        fi
        case $res in
            [Yy]* ) said_yes "Restarting PHP-FPM"
                    $ON_TARGET_DO sudo service php5-fpm restart
                    ;;
            * ) said_no ;;
        esac
    fi
  
  fi

}

# Runs the application
run
